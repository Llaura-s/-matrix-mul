#include<iostream>
#include<chrono>
#define A 200000000 // 测试参数 
#define B 200000000  
#define C 10000 
using namespace std;
using namespace std::chrono;
struct Matrix
{
	int rows;
	int cols;
	float *ele;
 };
 Matrix multiplication(Matrix a,Matrix b)
 {
 	Matrix c={0,0};
 	c.rows=a.rows;
 	c.cols=b.cols;
 	c.ele=new float[c.rows*c.cols]();                     //申请动态内存并初始化
 	if(a.cols!=b.rows)                      
 	{
 		cout<<"error!"<<endl;
 		return c;
	}
	else
	{
	    for(int k=0;k<a.rows;k++)
	 	{
	 		for(int j=0;j<b.cols;j++)
	 		{
	 			for(int i=0;i<a.cols;i++)
	 			{
	 				c.ele[j + a.rows* k] += a.ele[i+a.cols* k] * b.ele[j + b.cols* i];
				} 
			}
		 } 
	   return c;
	 }delete []c.ele;                         //释放内存
 }    	
 int main()
 {
 	Matrix mata;
 	Matrix matb;
 	Matrix matc;
	mata.rows=100;                                   //测试参数
	mata.cols=2000000;
	matb.rows=2000000;
	matb.cols=100; 
	mata.ele=new float [A]();                      
	matb.ele=new float [B]();
	matc.ele=new float [C]();
	mata.ele[0]=2;                                   
        matb.ele[0]=2;                             
        auto start = system_clock::now();                                           //开始计时 
	matc=multiplication(mata,matb);
        auto end   = system_clock::now();                                                //结束计时 
        auto duration = duration_cast<seconds>(end - start);
        cout << "time:"  << double(duration.count()) * seconds::period::num / seconds::period::den 
              << "s" << endl;                                                                     //输出运行时间 
        for (int i = 0; i < matc.rows; i++) 
	{
            for (int j = 0; j < matc.cols; j++) 
	    {
               cout << matc.ele[i *matc.cols + j] << " ";
            }
        cout <<endl;
        }
	 delete []mata.ele;
	 delete []matb.ele;
	 delete []matc.ele;
	 return 0; 	
 }
